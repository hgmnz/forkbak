#!/usr/bin/env ruby

require 'rest_client'
require 'platform-api'
require 'pg'
require 'net/smtp'
require "securerandom"

$stdout.sync = true

module Forkbak
  def self.notify_error(text)
    recipients = ENV['RECIPIENT_EMAILS'].split(/,/)
    message = <<END_OF_MESSAGE
From: Error <error@teamapp.com>
To: #{recipients.join(', ')}
Subject: DB Backup Error
Date: #{Time.now}
Message-Id: <SecureRandom.base64(20)@example.com>

#{text}
END_OF_MESSAGE

    server = 'smtp.sendgrid.net'
    port = 587
    username = ENV['SENDGRID_USERNAME']
    password = ENV['SENDGRID_PASSWORD']

    smtp = Net::SMTP.new(server, port)
    smtp.enable_starttls_auto
    smtp.start('heroku.com', username, password, :plain)
    smtp.send_message(message, 'error@teamapp.com', recipients)
  end

  def self.heroku
    PlatformAPI.connect(
      ENV.fetch("HEROKU_API_KEY"),
      default_headers: {'Accept' => 'application/vnd.heroku+json; version=3.switzerland'}
    )
  end

  def self.create_database
    database_to_fork = heroku.config_var.info(ENV.fetch('FORK_FROM_APP'))['DATABASE_URL']
    heroku.addon.create(ENV['APP'], {
      plan: "heroku-postgresql:standard-2",
      config: {
        fork: database_to_fork,
        fast: true
      }
    })
  end

  def self.database_url(config_var)
    heroku.config_var.info(ENV.fetch('APP'))[config_var]
  end

  def self.wait_for_database(config_var)
    count = 0
    loop do
      begin
        resolved_database_url = self.database_url(config_var)

        url = URI.parse(resolved_database_url)
        host = url.host
        host = host.gsub(/%2F/i, '/') if host

        params = [
          host,
          url.port || 5432,
          nil, '',
          url.path.gsub("/",""),
          url.user,
          url.password
        ]
        conn = PG::Connection.open(*params)
        result = conn.exec("SELECT pg_is_in_recovery()").values
        break if result[0][0] == 'f'
        puts "still waiting, pg is in recovery"
      rescue PG::ConnectionBad => e
        if e.message =~ /Is the server running on host|the database system is starting up|could not connect to server/
          # NOTE: Phase 2: Catching up with the original database
          puts "DB preparing"
        elsif e.message =~ /password authentication failed for user/
          count += 1
          puts "Unable to connect - bad creds? Retrying"

          # Apparently we might get this error even though we've got the credentials correct. Retry a few times to wait until DB is up.
          if count > 25 
            notify_error("Bad credentials")
            break  # Don't retry
          end
        elsif e.message =~ /could not translate host name/
          # NOTE: Phase 1: This is expected a few times in the beginning because the newly create DB is not immediately ready.
          puts "Unable to connect, DNS issues. Retrying"
        else
          raise
        end
      rescue =>e
        message = "Error: #{e.message}"
        puts message
        notify_error(message)
        break  # Don't retry
      ensure
        conn.close if conn
      end
      sleep(10)
    end
  end

  def self.create_backup(db)
    pgbackups = Forkbak::PGBackupsClient.new(db: db)
    loop do
      if transfer_id = pgbackups.transfer!
        return transfer_id
      else
        sleep 10
        puts "Could not initiate transfer, retrying"
      end
    end
  end

  def self.wait_for_backup(db, transfer_id)
    pgbackups = Forkbak::PGBackupsClient.new(db: db, transfer_id: transfer_id)
    until pgbackups.transfer_status == Forkbak::PGBackupsClient::StatusCompleted
      putc '.'
      sleep 10
    end
    puts "Backup complete"
  end

  def self.destroy_databases
    heroku.addon.list(ENV.fetch('APP')).select do |addon|
      addon['addon_service']['name'] == 'heroku-postgresql'
    end.each do |addon|
      heroku.addon.delete(ENV.fetch('APP'), addon['name'])
    end
  end
end

module Forkbak
  class PGBackupsClient
    def initialize(opts)
      @db          = opts.fetch(:db)
      @transfer_id = opts[:transfer_id]
    end

    def transfer!

      response = JSON.parse(
        restclient_resource["/client/v11/databases/#{@db['name']}/backups"]
          .post(expire: true)
      )
      @transfer_id = response['uuid']
    rescue => e
      puts "Error attempting transfer: ##{e.class}: #{e.message}"
      nil
    end

    def transfer_status
      response = JSON.parse(
        restclient_resource["/client/v11/databases/#{@db['name']}/transfers/#{@transfer_id}"].get
      )
      if response['errors']
        StatusError
      elsif response['finished_at']
        StatusCompleted
      end
    rescue => e
      StatusUnknown
    end

    StatusCompleted = Class.new
    StatusError     = Class.new
    StatusUnknown   = Class.new

  private
    def restclient_resource
      @restclient_resource ||= RestClient::Resource.new(
          "https://:#{ENV['HEROKU_API_KEY']}@shogun.heroku.com"
      )
    end
  end
end

def run
  #Forkbak.notify_error("Test database backup error notification")

  start = Time.now
  puts "Cleaning up leftover DBs"
  Forkbak.destroy_databases
  puts "Creating database"
  db = Forkbak.create_database
  begin
    puts "Waiting for database to become available"
    Forkbak.wait_for_database(db['config_vars'].first)
    puts "Creating backup"
    transfer_id = Forkbak.create_backup(db)
    puts "Waiting for backup to complete (#{transfer_id})"
    Forkbak.wait_for_backup(db, transfer_id)
  rescue => e
    message = "Failed to take backup: #{e.class} - #{e.message}\n\n#{e.backtrace.join("\n")}"
    Forkbak.notify_error(message)
    puts message
  ensure
    puts "Done, took #{Time.now - start}"
    Forkbak.destroy_databases
  end
end

run
